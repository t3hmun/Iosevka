import [add-common-feature add-feature ChainRuleBuilder BeginLookupBlock EndLookupBlock] from "./table-util"
extern Set

define-operator "~>" 880 'right' : syntax-rules
	`(@l ~> @r) `{.left @l .right @r}

define [lsx s] : lambda [t] : t.map : lambda [x] "\(x).lig.\(s)"
define [csx s] : lambda [t] : t.map : lambda [x] "\(x).\(s)"
define [just s] : lambda [t] : t.map : lambda [x] s
define look-around null
define advance : lambda [t] null
define ident : lambda [t] : t.map : lambda [x] x

export : define [buildLigations sink para plm] : begin
	local rec : BeginLookupBlock sink
	local rankedLookups {}
	foreach [ {featureName mappedFeature} : pairs-of plm] : begin
		buildLigationsImpl sink para featureName mappedFeature rankedLookups
	EndLookupBlock rec sink

define [buildLigationsImpl sink para featureName mappedFeature rankedLookups] : begin
	define {chain-rule reverse-rule} : ChainRuleBuilder sink

	define arrowStick  {'hyphen' 'equal'}
	define [stickClass style] : [lsx style] {'hyphen' 'equal'}
	define [stickTf style] : {'hyphen' 'equal'} ~> [lsx style]
	define anyWave {'asciiTilde' 'asciiTilde.low' 'asciiTilde.high'}
	define [waveClass cl] : [just ('wave.' + cl)] anyWave
	define [waveTf cl] : anyWave ~> [waveClass cl]

	define less {'less'}
	define lessAndEquiv {'less' 'less.lig.shift0' 'less.lig.shift0.anti'}
	define hyphen {'hyphen'}
	define equal {'equal'}
	define exclam {'exclam'}
	define greater {'greater'}
	define greaterAndEquiv {'greater' 'greater.lig.shift0' 'greater.lig.shift0.anti'}
	define anyBar {'bar' 'slash' 'backslash'}
	define slash {'slash'}
	define backslash {'backslash'}
	define bar {'bar'}
	define regexLookAround [less.concat hyphen equal exclam greater anyBar]

	define alphabet {
		'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm'
		'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'
		'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M'
		'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'
		'zero.lnum' 'zero.onum' 'one.lnum' 'one.onum'
		'two.lnum' 'two.onum' 'three.lnum' 'three.onum'
		'four.lnum' 'four.onum' 'five.lnum' 'five.onum'
		'six.lnum' 'six.onum' 'seven.lnum' 'seven.onum'
		'eight.lnum' 'eight.onum' 'nine.lnum' 'nine.onum'
	}

	define [acops]  {'less' 'greater' 'hyphen' 'equal' 'plus'}
	define [acskip] {
		'slash' 'bar' 'at' 'ampersand' 'percent'
		'numbersign' 'numbersign.upright' 'numbersign.slanted'
	}
	define dottyPunctuations : list
		* "colon"
		* "colon.mid"
		* "semicolon"
		* "period"
		* "period.mid"
		* "comma"
		* "question"
		* "exclam"
	define widePunctuation : list
		* 'parenLeft'
		* 'parenRight'
		* 'bracketLeft'
		* 'bracketRight'
		* 'braceLeft'
		* 'braceRight'
		* 'equal'
		* 'hyphen'
		* 'plus'
		* 'less'
		* 'greater'
		* 'numbersign'
		* 'slash'
		* 'ampersand'
		* 'asterisk'
		* 'asciiCaret'
		* 'asciiTilde'

	define [asterisk_center]  ({'asterisk'}          ~> {'asterisk.dfltlow'})
	define [colon_center]     ({'colon' 'colon.mid'} ~> {'colon.mid' 'colon.mid'})
	define [caret_center]     ({'asciiCaret'}        ~> {'asciiCaret.low'})
	define [tilde_center]     ({'asciiTilde'}        ~> {'asciiTilde.low'})
	define [period_center]    ({'period'}            ~> {'period.mid'})
	define [no_period_center] ({'period.mid'}        ~> {'period'})

	local ligationLookupName : 'lig_' + featureName + '{' + mappedFeature + '}'

	define [hasLG ln] : [mappedFeature.indexOf ln] >= 0

	define feature : add-common-feature sink : add-feature sink featureName

	local lastLookupName null
	local lookupRank 0
	local [dedup ln0 rank obj] : begin
		local h : JSON.stringify obj
		foreach [{name lookup} : items-of rankedLookups.(rank)] : begin
			local h1 : JSON.stringify lookup
			if (h == h1) : return {name false}
		return {ln0 true}

	local [AddRankedLookup obj] : begin
		if [not rankedLookups.(lookupRank)] : set rankedLookups.(lookupRank) {}
		local sameRankLookupBlob rankedLookups.(lookupRank)

		local {ln unique} : dedup (ligationLookupName + feature.lookups.length) lookupRank obj
		if [not sink.lookups.(ln)] : set sink.lookups.(ln) obj
		feature.lookups.push ln

		# In-feature ordering
		if lastLookupName : sink.lookupDep.push {lastLookupName ln}
		set lastLookupName ln

		# Cross-feature ordering
		if unique : begin
			if sameRankLookupBlob.length : begin
				local lastSameRank (sameRankLookupBlob.(sameRankLookupBlob.length - 1).0)
				if (lastSameRank != ln) : sink.lookupDep.push {lastSameRank ln}
			sameRankLookupBlob.push {ln obj}

	define [keep-if lg x] : if [hasLG lg] x null

	define [filterNulls _rules] : begin
		if [not _rules] : return _rules
		define rules {}
		foreach [rule : items-of _rules] : if rule : rules.push rule
		return rules

	define [CreateLigationLookup _rules] : begin
		define rules : filterNulls _rules
		if (rules && rules.length) : AddRankedLookup
			.type 'gsub_chaining'
			.subtables rules
		set lookupRank : lookupRank + 1

	define [CreateReverseLigationLookup _rules] : begin
		define rules : filterNulls _rules
		if (rules && rules.length) : AddRankedLookup
			.type 'gsub_reverse'
			.subtables rules
		set lookupRank : lookupRank + 1

	do "Operator centering"
		define centerizeGroups : { asterisk_center caret_center tilde_center colon_center [if [hasLG 'dotoper'] period_center nothing]}.filter (x => x)

		do "Bracket-star"
			CreateLigationLookup : keep-if 'brst' : list
				chain-rule # (*
					{'parenLeft'}  ~> look-around
					{'asterisk'}   ~> {'asterisk.dfltlow'}
				chain-rule # *)
					{'asterisk'}   ~> {'asterisk.dfltlow'}
					{'parenRight'} ~> look-around

		do "Bracket-colon"
			CreateLigationLookup : keep-if 'center-ops' : list
				chain-rule # (:
					{'parenLeft' 'bracketLeft' 'braceLeft'}  ~> look-around
					colon_center
				chain-rule # :)
					colon_center
					{'parenRight' 'bracketRight' 'braceRight'} ~> look-around

		do "Operator Centering"
			local startRules {}
			foreach [g : items-of centerizeGroups] : begin
				startRules.push : chain-rule [g] [g] [acskip] [acskip] [acops] # ::+
				startRules.push : chain-rule [g] [g] [acskip] [acops]          # ::+
				startRules.push : chain-rule [g] [g] [acops]                   # ::+
				startRules.push : chain-rule [g] [acskip] [acskip] [acops]     # :+
				startRules.push : chain-rule [g] [acskip] [acops]              # :+
				startRules.push : chain-rule [g] [acops]                       # :+
				startRules.push : chain-rule [acops] [acskip] [acskip] [g]     # +:
				startRules.push : chain-rule [acops] [acskip] [g]              # +:
				startRules.push : chain-rule [acops] [g]                       # +:
			CreateLigationLookup : keep-if 'center-ops' startRules

		do "Operator centering : Trailing"
			local centerizeL : centerizeGroups.map : x => [x].left.0
			local centerizeR : centerizeGroups.map : lambda [x] : begin
				local left [x].left
				local right [x].right
				while (right <@ Function) : set right [right left]
				return : if right (right.0 || left.0) (left.0)

			CreateLigationLookup : keep-if 'center-ops' : list
				chain-rule centerizeR [acskip] [acskip] (centerizeL ~> centerizeR)
				chain-rule centerizeR [acskip] (centerizeL ~> centerizeR)
				chain-rule centerizeR (centerizeL ~> centerizeR)
			CreateReverseLigationLookup : keep-if 'center-ops' : list
				reverse-rule
					centerizeL ~> centerizeR
					[acskip]   ~> look-around
					[acskip]   ~> look-around
					centerizeR ~> look-around
				reverse-rule
					centerizeL ~> centerizeR
					[acskip]   ~> look-around
					centerizeR ~> look-around
				reverse-rule
					centerizeL ~> centerizeR
					centerizeR ~> look-around

		do "Operator centering : Avoid 'letter-point' being centered"
			CreateLigationLookup : keep-if 'center-ops' : list
				chain-rule alphabet [no_period_center]
				chain-rule [no_period_center] alphabet

	do "Colon chains" : begin
		define dLeft      : [lsx 'dLeft'] dottyPunctuations
		define dRight     : [lsx 'dRight'] dottyPunctuations
		define dLeftHalf  : [lsx 'dLeftHalf'] dottyPunctuations
		define dRightHalf : [lsx 'dRightHalf'] dottyPunctuations
		define dMid       : [lsx 'dMid'] dottyPunctuations
		define boundary   widePunctuation

		CreateLigationLookup : keep-if 'kern-dotty' : list
			chain-rule
				[dRight.concat dMid] ~> look-around
				dottyPunctuations ~> dMid
				dottyPunctuations ~> look-around
			chain-rule
				[dRight.concat dMid] ~> look-around
				dottyPunctuations ~> dLeft
			chain-rule
				dottyPunctuations ~> dRight
				dottyPunctuations ~> look-around
		CreateLigationLookup : keep-if 'kern-dotty' : list
			chain-rule
				boundary             ~> look-around
				dRight               ~> dMid
				dLeft                ~> dMid
				boundary             ~> look-around
			chain-rule
				boundary             ~> look-around
				dRight               ~> dMid
				[dMid.concat dLeft]  ~> look-around
			chain-rule
				[dMid.concat dRight] ~> look-around
				dLeft                ~> dMid
				boundary             ~> look-around
		CreateLigationLookup : keep-if 'kern-dotty' : list
			chain-rule
				dRight ~> dRightHalf
				dLeft  ~> dLeftHalf

	do "Plus chains" : begin
		CreateLigationLookup : keep-if 'plusplus' : list
			# +++++++++
			chain-rule
				{'plus.lig.cr' 'plus.lig.jr'} ~> look-around
				{'plus'} ~> [lsx 'jr']
			chain-rule
				{'plus'} ~> [lsx 'lc']
				{'plus'} ~> [lsx 'cc']
				{'plus'} ~> [lsx 'cc']
				{'plus'} ~> [lsx 'cr']
			chain-rule
				{'plus'} ~> [lsx 'lc']
				{'plus'} ~> [lsx 'cc']
				{'plus'} ~> [lsx 'cr']
			chain-rule
				{'plus'} ~> [lsx 'lc']
				{'plus'} ~> [lsx 'cr']
		CreateLigationLookup : keep-if 'plusplus' : list
			chain-rule # +++
				{'plus.lig.lc'} ~> {'plus.lig.lc.s'}
				{'plus.lig.cc'} ~> look-around
				{'plus.lig.cr'} ~> {'plus.lig.cr.s'}
			chain-rule # ++
				{'plus.lig.lc'} ~> {'plus.lig.lc.s'}
				{'plus.lig.cr'} ~> {'plus.lig.cr.s'}

	do "triangles" : begin
		CreateLigationLookup : keep-if 'trig' : list
			chain-rule # <|
				less    ~> [lsx 'trig']
				{'bar'} ~> [lsx 'trig']
			chain-rule # |>
				{'bar'} ~> [lsx 'trig']
				greater ~> [lsx 'trig']
			chain-rule # |>
				[[lsx 'trig'] {'bar'}] ~> look-around
				greater                ~> [lsx 'trig']
			chain-rule # <||||
				[[lsx 'trig'] {'bar'}] ~> look-around
				{'bar'}                ~> [lsx 'trig']
		CreateReverseLigationLookup : keep-if 'trig' : list
			reverse-rule
				{'bar'}                ~> [[lsx 'trig'] {'bar'}]
				[[lsx 'trig'] {'bar'}] ~> look-around

	do "shift-eq operators (<<= and >>=)"
		CreateLigationLookup : keep-if "llggeq" : list
			chain-rule # =<<<=
				equal      ~> look-around
				less       ~> advance
				less       ~> advance
				less       ~> advance
				equal      ~> look-around
			chain-rule # <<<==
				less       ~> advance
				less       ~> advance
				less       ~> advance
				equal      ~> look-around
				equal      ~> look-around
			chain-rule # <<<=
				less       ~> [lsx 'shiftN0h']
				less       ~> look-around
				less       ~> [lsx 'shift0h']
				equal      ~> look-around
			chain-rule # =>>>=
				equal      ~> look-around
				greater    ~> advance
				greater    ~> advance
				greater    ~> advance
				equal      ~> look-around
			chain-rule # >>>==
				greater    ~> advance
				greater    ~> advance
				greater    ~> advance
				equal      ~> look-around
				equal      ~> look-around
			chain-rule # >>>=
				greater    ~> [lsx 'shift0h']
				greater    ~> look-around
				greater    ~> [lsx 'shiftN0h']
				equal      ~> look-around
			chain-rule # =<<=
				equal      ~> look-around
				less       ~> advance
				less       ~> advance
				equal      ~> look-around
			chain-rule # <<==
				less       ~> advance
				less       ~> advance
				equal      ~> look-around
				equal      ~> look-around
			chain-rule # <<=
				less       ~> [lsx 'shiftN0h']
				less       ~> [lsx 'shift0h']
				equal      ~> look-around
			chain-rule # =>>=
				equal      ~> look-around
				greater    ~> advance
				greater    ~> advance
				equal      ~> look-around
			chain-rule # >>==
				greater    ~> advance
				greater    ~> advance
				equal      ~> look-around
				equal      ~> look-around
			chain-rule # >>=
				greater    ~> [lsx 'shift0h']
				greater    ~> [lsx 'shiftN0h']
				equal      ~> look-around

	do "HTML Comment"
		CreateLigationLookup : keep-if 'html-comment' : list
			chain-rule # <!---
				less   ~> look-around
				exclam ~> [lsx 'htmlcommentstart']
				hyphen ~> [lsx 'lxc']
				hyphen ~> [lsx 'cc']
				hyphen ~> [lsx 'cf']
			chain-rule # <!--
				less   ~> look-around
				exclam ~> [lsx 'htmlcommentstart']
				hyphen ~> [lsx 'lxc']
				hyphen ~> [lsx 'cf']

	do "Arrows"
		define singular : hyphen.concat anyWave
		define [CBarSingular k] : begin
			local hyphenSet : new Set hyphen
			local fHyphen : lsx k
			local fWave   : just "wave.\(k)"
			return : lambda [t] : begin
				local hyphenResults : fHyphen t
				local waveResults   : fWave   t
				return : t.map : lambda [x j]
					if [hyphenSet.has x] hyphenResults.(j) waveResults.(j)

		define ArrowFormationConfig : list
			#    rod      dbl  ltgt  FBarCls
			list equal    1    1     lsx
			list singular 0    0     CBarSingular

		define ArrowExtensionConfig : list
			#    rod      FBarCls
			list equal    lsx
			list hyphen   lsx
			list anyWave  [lambda [k] [just "wave.\(k)"]]

		foreach [{barCls dbl ltgt CBar} : items-of ArrowFormationConfig] : do
			define heads {}
			define rods  {}

			# Disable regular expression lookaheads
			heads.push : chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
			heads.push : chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
			heads.push : chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance

			define [CJoinHeadForce]         : if dbl [lsx 'dblhead']        [lsx 'shift0']
			define [CJoinHeadMid]           : if dbl [lsx 'dblhead.mid']    [lsx 'shift0.mid']
			define [CJoinHeadForceShift1]   : if dbl [lsx 'dblhead.shift1'] [lsx 'shift1']
			define [CAntiHeadForce]         : if dbl [lsx 'hole']           [lsx 'shift0.anti']
			define [CAntiHeadForceShiftN1]  : if dbl [lsx 'hole.shiftN1']   [lsx 'shiftN1']

			define [TJoinHeadForce]         : if [hasLG 'arrow']  [CJoinHeadForce]        advance
			define [TJoinHeadAmbig]         : if [not ltgt]       [TJoinHeadForce]        advance
			define [TJoinHeadForceShift1]   : if [hasLG 'arrow']  [CJoinHeadForceShift1]  advance
			define [TMiddleHead]            : if [hasLG 'arrow2'] [CJoinHeadMid]          [TJoinHeadForce]
			define [TAntiHeadForce]         : if [hasLG 'arrow2'] [CAntiHeadForce]        advance
			define [TAntiHeadAmbig]         : if [not ltgt]       [TAntiHeadForce]        advance
			define [TAntiHeadForceShiftN1]  : if [hasLG 'arrow2'] [CAntiHeadForceShiftN1] advance

			define [CollectApply ck fns] : begin
				local a : new Set
				foreach [fnT : items-of fns] : begin
					define fn [fnT]
					define transformed : if fn [fn ck] ck
					foreach [g : items-of transformed] : begin
						a.add g
				return : Array.from a

			local arrowIndicator : anyBar.concat : CollectApply [less.concat greater] : list [lambda [] ident] CJoinHeadForce CJoinHeadForceShift1 CAntiHeadForce CAntiHeadForceShiftN1 CJoinHeadMid

			# Arrow head identifier
			begin "Central"
				heads.push : chain-rule # = > > =
					barCls  ~> look-around
					greater ~> [TJoinHeadForceShift1]
					greater ~> [TAntiHeadForce]
					barCls  ~> look-around
				heads.push : chain-rule # = < < =
					barCls  ~> look-around
					less    ~> [TAntiHeadForce]
					less    ~> [TJoinHeadForceShift1]
					barCls  ~> look-around
				heads.push : chain-rule # = > < =
					barCls  ~> look-around
					greater ~> [TJoinHeadForce]
					less    ~> [TJoinHeadForce]
					barCls  ~> look-around
				heads.push : chain-rule # = < > =
					barCls  ~> look-around
					less    ~> [TAntiHeadForce]
					greater ~> [TAntiHeadForce]
					barCls  ~> look-around
				heads.push : chain-rule # = > =
					barCls  ~> look-around
					greater ~> [TMiddleHead]
					barCls  ~> look-around
				heads.push : chain-rule # = < =
					barCls  ~> look-around
					less    ~> [TMiddleHead]
					barCls  ~> look-around
			begin "Boundary"
				heads.push : chain-rule # = > >
					barCls  ~> look-around
					greater ~> [TJoinHeadForceShift1]
					greater ~> look-around
				heads.push : chain-rule # = < <
					barCls  ~> look-around
					less    ~> [TAntiHeadForceShiftN1]
					less    ~> look-around
				heads.push : chain-rule # > > =
					greater ~> look-around
					greater ~> [TAntiHeadForceShiftN1]
					barCls  ~> look-around
				heads.push : chain-rule # < < =
					less    ~> look-around
					less    ~> [TJoinHeadForceShift1]
					barCls  ~> look-around
				heads.push : chain-rule # = = >
					barCls  ~> look-around
					barCls  ~> look-around
					greater ~> [TJoinHeadForce]
				heads.push : chain-rule # = = <
					barCls  ~> look-around
					barCls  ~> look-around
					less    ~> [TAntiHeadForce]
				heads.push : chain-rule # > = =
					greater ~> [TAntiHeadForce]
					barCls  ~> look-around
					barCls  ~> look-around
				heads.push : chain-rule # < = =
					less    ~> [TJoinHeadForce]
					barCls  ~> look-around
					barCls  ~> look-around
				heads.push : chain-rule # * = >
					arrowIndicator ~> look-around
					barCls  ~> look-around
					greater ~> [TJoinHeadForce]
				heads.push : chain-rule # * = <
					arrowIndicator ~> look-around
					barCls  ~> look-around
					less    ~> [TAntiHeadForce]
				heads.push : chain-rule # > = *
					greater ~> [TAntiHeadForce]
					barCls  ~> look-around
					arrowIndicator ~> look-around
				heads.push : chain-rule # < = *
					less    ~> [TJoinHeadForce]
					barCls  ~> look-around
					arrowIndicator ~> look-around
			begin "Ambiguous"
				heads.push : chain-rule # = >
					barCls  ~> look-around
					greater ~> [TJoinHeadAmbig]
				heads.push : chain-rule # = <
					barCls  ~> look-around
					less    ~> [TAntiHeadAmbig]
				heads.push : chain-rule # > =
					greater ~> [TAntiHeadAmbig]
					barCls  ~> look-around
				heads.push : chain-rule # < =
					less    ~> [TJoinHeadAmbig]
					barCls  ~> look-around

			# Rod transformer
			define kindLeftMid  : list
				list false 'l'  : CollectApply less    : list CJoinHeadForce CJoinHeadMid
				list false 'l1' : CollectApply less    : list CJoinHeadForceShift1
				list false 'j'  : CollectApply greater : list CAntiHeadForce CJoinHeadMid
				list true  'j'    anyBar
				list false 'j1' : CollectApply greater : list CAntiHeadForceShiftN1
			define kindRightMid : list
				list false 'r'  : CollectApply greater : list CJoinHeadForce CJoinHeadMid
				list false 'r1' : CollectApply greater : list CJoinHeadForceShift1
				list false 'j'  : CollectApply less    : list CAntiHeadForce CJoinHeadMid
				list true  'j'    anyBar
				list false 'j1' : CollectApply less    : list CAntiHeadForceShiftN1

			# console.log featureName barCls kindLeftMid kindRightMid

			foreach [{ lBar kl envL } : items-of kindLeftMid] : begin
				foreach [{ rBar kr envR } : items-of kindRightMid] : begin
					if (!lBar || !rBar) : begin
						rods.push : chain-rule	# < - >
							envL   ~> look-around
							barCls ~> [CBar "\(kl)\(kr)"]
							envR   ~> look-around

			foreach [{ lBar kl envL } : items-of kindLeftMid] : begin
				if (!lBar) : begin
					rods.push : chain-rule	# < -
						envL   ~> look-around
						barCls ~> [CBar "\(kl)f"]

			foreach [{ rBar kr envR } : items-of kindRightMid] : begin
				if (!rBar) : begin
					rods.push : chain-rule	# - >
						barCls ~> [CBar "f\(kr)"]
						envR   ~> look-around

			CreateLigationLookup heads
			CreateLigationLookup rods

		foreach [{barCls CBar} : items-of ArrowExtensionConfig] : do
			do "Extended arrow sticks"
				# Extension
				local stickTermLeft  {}
				local stickConnLeft  {}
				foreach [lc : items-of {'l' 'l1' 'j' 'j1' 'c' 'z'}] : begin
					set stickTermLeft : stickTermLeft.concat : [CBar "\(lc)f"] barCls
					set stickConnLeft : stickConnLeft.concat : [CBar "\(lc)c"] barCls

				local stickTermRight {}
				local stickConnRight {}
				foreach [rc : items-of {'r' 'r1' 'j' 'j1' 'c' 'z'}] : begin
					set stickTermRight : stickTermRight.concat : [CBar "f\(rc)"] barCls
					set stickConnRight : stickConnRight.concat : [CBar "c\(rc)"] barCls

				CreateLigationLookup : list
					chain-rule
						stickTermLeft  ~> look-around
						barCls         ~> [CBar 'zf']

				CreateReverseLigationLookup : list
					reverse-rule
						barCls         ~> [CBar 'fz']
						stickTermRight ~> look-around

				# Fix for Apple : arrow bar at line start won't join with the rest (#548)
				CreateLigationLookup : list
					chain-rule
						barCls         ~> [CBar 'fz']
						stickTermRight ~> look-around

				CreateLigationLookup : list
					chain-rule
						stickTermLeft        ~> look-around
						[[CBar 'zf'] barCls] ~> [[CBar 'zj'] barCls]
						anyBar               ~> look-around
					chain-rule
						anyBar               ~> look-around
						[[CBar 'fz'] barCls] ~> [[CBar 'jz'] barCls]
						stickTermRight       ~> look-around

				# Gap filling
				CreateLigationLookup : list
					chain-rule
						stickTermLeft  ~> stickConnLeft
						stickTermRight ~> stickConnRight

		foreach [{barCls dbl ltgt CBar} : items-of ArrowFormationConfig] : do
			define [CJoinHeadForce]         : if dbl [lsx 'dblhead']        [lsx 'shift0']
			define [CAntiHeadForce]         : if dbl [lsx 'hole']           [lsx 'shift0.anti']

			do "Ambiguous rods"
				define ambiguousRods {}
				ambiguousRods.push : chain-rule # =>
					barCls     ~> [if [hasLG 'arrow'] [CBar 'fr'] advance]
					greater    ~> [if [hasLG 'arrow'] [CJoinHeadForce] advance]
				if ltgt
					ambiguousRods.push : chain-rule # <=
						less       ~> [if [hasLG 'arrowZALE'] [CJoinHeadForce] advance]
						barCls     ~> [if [hasLG 'arrowZALE'] [CBar 'lf'] advance]
					ambiguousRods.push : chain-rule # <-
						less       ~> [if [hasLG 'arrow'] [CJoinHeadForce] advance]
						barCls     ~> [if [hasLG 'arrow'] [CBar 'lf'] advance]

				ambiguousRods.push : chain-rule # =<
					barCls     ~> [if [hasLG 'arrow2'] [CBar 'fj'] advance]
					less       ~> [if [hasLG 'arrow2'] [CAntiHeadForce] advance]
				if ltgt
					ambiguousRods.push : chain-rule # >=
						greater    ~> [if [hasLG 'arrowZAGE'] [CAntiHeadForce] advance]
						barCls     ~> [if [hasLG 'arrowZAGE'] [CBar 'jf'] advance]
					ambiguousRods.push : chain-rule # >-
						greater    ~> [if [hasLG 'arrow2'] [CAntiHeadForce] advance]
						barCls     ~> [if [hasLG 'arrow2'] [CBar 'jf'] advance]

				CreateLigationLookup ambiguousRods

	# <<, >>, <<<, >>>
	do "Less/Greater Chaining"
		CreateLigationLookup : keep-if 'llgg' : list
			chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
			chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance
				regexLookAround ~> advance
			chain-rule
				{'parenLeft'} ~> look-around
				{'question'}  ~> look-around
				regexLookAround ~> advance
				regexLookAround ~> advance
			chain-rule # <<<
				less       ~> [lsx 'shiftN0h']
				less       ~> look-around
				less       ~> [lsx 'shift0h']
			chain-rule # >>>
				greater    ~> [lsx 'shift0h']
				greater    ~> look-around
				greater    ~> [lsx 'shiftN0h']
			chain-rule # <<
				less       ~> [lsx 'shiftN0h']
				less       ~> [lsx 'shift0h']
			chain-rule # >>
				greater    ~> [lsx 'shift0h']
				greater    ~> [lsx 'shiftN0h']

		# Cancel alternates of < and > shapes if there are more after them
		local lAll  {"less" "less.lig.shift0h" "less.lig.shiftN0h"}
		local lNeut {"less" "less"            "less"}
		local gAll  {"greater" "greater.lig.shift0h" "greater.lig.shiftN0h"}
		local gNeut {"greater" "greater"            "greater"}
		local lgAll  : lAll.concat  gAll
		local lgNeut : lNeut.concat gNeut
		CreateLigationLookup : keep-if 'llgg' : list
			chain-rule
				lgAll ~> lgNeut
				lgAll ~> lgNeut
				lgAll ~> lgNeut
				lgAll ~> look-around
		CreateLigationLookup : keep-if 'llgg' : list
			chain-rule
				lgAll ~> look-around
				lgAll ~> look-around
				lgAll ~> look-around
				lgAll ~> lgNeut
		CreateLigationLookup : keep-if 'llgg' : list
			chain-rule
				lAll ~> lNeut
				lAll ~> lNeut
				gAll ~> gNeut
			chain-rule
				gAll ~> gNeut
				gAll ~> gNeut
				lAll ~> lNeut
			chain-rule
				lAll ~> lNeut
				gAll ~> gNeut
				gAll ~> gNeut
			chain-rule
				gAll ~> gNeut
				lAll ~> lNeut
				lAll ~> lNeut

	# /\ and \/
	do "logical" : CreateLigationLookup : keep-if 'logic' : list
		chain-rule
			slash         ~> [csx 'left']
			backslash     ~> [csx 'right']
		chain-rule
			backslash     ~> [csx 'left']
			slash         ~> [csx 'right']
		chain-rule
			bar           ~> look-around
			hyphen        ~> [lsx 'jf']
		chain-rule
			hyphen        ~> [lsx 'fj']
			bar           ~> look-around

	# == and !=, and other related
	do "equals" : CreateLigationLookup : list
		# Disable regular expression lookaheads
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
		piecewise
			[hasLG 'eqeq'] : chain-rule
				{'equal.cf' 'equal.jf'} ~> look-around
				equal                   ~> {'equal.jf'}
		piecewise
			[hasLG 'exeq-alt-1'] : chain-rule
				exclam      ~> {'equal.fc.neg4-alt-1'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
			[hasLG 'exeq'] : chain-rule
				exclam      ~> {'equal.fc.neg4'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'eqeq'] : chain-rule
				equal       ~> {'equal.fc'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'exeqeq'] : chain-rule
				exclam      ~> {'ident.fc.neg3'}
				equal       ~> {'ident.cc'}
				equal       ~> {'ident.cf'}
			[hasLG 'eqexeq'] : chain-rule
				equal       ~> {'ident.fc.neg3'}
				exclam      ~> {'ident.cc'}
				equal       ~> {'ident.cf'}
			[hasLG 'eqexeq-dl'] : chain-rule
				equal       ~> {'equal.fc.neg3'}
				exclam      ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
			[hasLG 'exeq-alt-1'] : chain-rule
				exclam      ~> {'equal.fc.neg3-alt-1'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
			[hasLG 'exeq'] : chain-rule
				exclam      ~> {'equal.fc.neg3'}
				equal       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'eqslasheq'] : chain-rule
				equal       ~> {'ident.fc.neg3'}
				slash       ~> {'ident.cc'}
				equal       ~> {'ident.cf'}
			[hasLG 'slasheq'] : chain-rule
				equal       ~> {'equal.fc.neg3'}
				slash       ~> {'equal.cc'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'eqeqeq'] : chain-rule
				equal       ~> {'ident.fc'}
				equal       ~> {'ident.cc'}
				equal       ~> {'ident.cf'}
		piecewise
			[hasLG 'tildeeq'] : chain-rule
				anyWave     ~> [just 'equal.fc.neg']
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'slasheq'] : chain-rule
				slash       ~> {'equal.fc.neg'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'exeq-alt-1'] : chain-rule
				exclam      ~> {'equal.fc.neg-alt-1'}
				equal       ~> {'equal.cf'}
			[hasLG 'exeq'] : chain-rule
				exclam      ~> {'equal.fc.neg'}
				equal       ~> {'equal.cf'}
		piecewise
			[hasLG 'ltgt-diamond'] : chain-rule
				lessAndEquiv ~> [just 'less.lig.diamond']
				greaterAndEquiv ~> [just 'greater.lig.diamond']
			[hasLG 'ltgt-ne'] : chain-rule
				lessAndEquiv ~> [just 'equal.fc.neg']
				greaterAndEquiv ~> [just 'equal.cf']
		piecewise
			[hasLG 'eqeq'] : chain-rule
				equal       ~> {'equal.fc'}
				equal       ~> {'equal.cf'}

	# <= and >=
	do "inequals" : CreateLigationLookup : keep-if 'ineq' : list
		# Disable regular expression lookaheads
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
			regexLookAround ~> advance
		chain-rule
			{'parenLeft'} ~> look-around
			{'question'}  ~> look-around
			regexLookAround ~> advance
			regexLookAround ~> advance
		chain-rule
			[acops]            ~> look-around
			{'less' 'greater'} ~> advance
			equal              ~> advance
		chain-rule
			{'less' 'greater'} ~> advance
			equal              ~> advance
			[acops]            ~> look-around
		chain-rule
			{'less'}    ~> {'less.lig2'}
			equal       ~> {'eq.at-lteq.lig2'}
		chain-rule
			{'greater'} ~> {'greater.lig2'}
			equal       ~> {'eq.at-gteq.lig2'}

	# :>
	do "colon-less-greater" : CreateLigationLookup : keep-if 'colon-greater' : list
		chain-rule
			{'colon.mid'} ~> look-around
			{'greater'}   ~> {'greaterArrow'}
