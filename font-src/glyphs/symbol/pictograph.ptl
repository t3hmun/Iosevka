###### Other symbols
$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../support/utils'
import [designParameters] from '../../meta/aesthetics'
import '../../support/transform' as Transform
import '../../support/mask-bit' as maskBit

glyph-module

glyph-block Symbol-Pictograph-Suit-Cards : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	local df : DivFrame para.diversityM
	local suitTop : mix SymbolMid PictTop 0.75
	local suitBot : mix SymbolMid PictBot 0.75
	local suitRight : df.middle + [mix RightSB Width (1 / 2)] - Middle
	local suitLeft : df.middle - (suitRight - df.middle)
	local sw : adviceBlackness 4.25


	define [wrap g] : glyph-proc
		set-width df.width
		include g AS_BASE

	define heartTop : mix suitBot suitTop 0.975
	define [HeartInnerShape top sw tip ext] : begin
		local y2 : mix suitBot top 0.75
		local y3 : mix suitBot top 0.75
		return : spiro-outline
			corner df.middle (suitBot + sw * tip)
			quadcontrols 1 (2 / 3)
			g4 (suitRight - O - sw) y2
			arcvh
			g4 [mix df.middle suitRight 0.5] (top - sw * tip / 1.75)
			archv
			if sw
			: then : list
				corner (df.middle + sw / 3) (y3 - sw * ext)
				corner (df.middle - sw / 3) (y3 - sw * ext)
			: else : corner df.middle (y3 - sw)
			arcvh
			g4 [mix df.middle suitLeft 0.5] (top - sw * tip / 1.75)
			archv
			g4 (suitLeft + O + sw) y2
			quadcontrols 0 (1 / 3)
			close

	create-glyph 'heartSuit' 0x2665 : wrap : HeartInnerShape heartTop 0 0 0

	create-glyph 'whiteHeartSuit' 0x2661 : wrap : difference [refer-glyph 'heartSuit'] [HeartInnerShape heartTop sw 1.75 0.8]

	create-glyph 'spadeSuit' 0x2660 : wrap : union
		create-glyph : glyph-proc
			include : HeartInnerShape suitTop 0 0 0
			include : Upright
			include : Translate (-df.middle) (-suitBot)
			include : Scale 1 (-0.75)
			include : Translate df.middle suitTop
			include : Italify
		HBarBottom [mix SB df.rightSB 0.25] [mix df.rightSB SB 0.25] suitBot sw
		VBar df.middle suitBot [mix suitBot suitTop (1 - 0.75 * 0.75)] sw

	create-glyph 'whiteSpadeSuit' 0x2664 : wrap : difference [refer-glyph 'spadeSuit'] : create-glyph : glyph-proc
		include : HeartInnerShape suitTop sw 2 0
		include : Upright
		include : Translate (-df.middle) (-suitBot)
		include : Scale 1 (-0.75)
		include : Translate df.middle suitTop
		include : Italify

	local clubTopY : mix suitTop suitBot 0.22
	local clubTriangleHeight : (suitTop - suitBot) * 0.3
	define [ClubTriangles r] : union
		RingAt df.middle clubTopY r
		RingAt (df.middle - clubTriangleHeight / [Math.sqrt 3]) (clubTopY - clubTriangleHeight) r
		RingAt (df.middle + clubTriangleHeight / [Math.sqrt 3]) (clubTopY - clubTriangleHeight) r
		spiro-outline
			corner df.middle clubTopY
			corner (df.middle - clubTriangleHeight / [Math.sqrt 3]) (clubTopY - clubTriangleHeight)
			corner (df.middle + clubTriangleHeight / [Math.sqrt 3]) (clubTopY - clubTriangleHeight)

	define [ClubShape r] : create-glyph : glyph-proc
		include : ClubTriangles r
		include : HBarBottom [mix SB df.rightSB 0.25] [mix df.rightSB SB 0.25] suitBot sw
		include : VBar df.middle suitBot [mix suitBot suitTop 0.45] sw

	local circleRadius : (suitTop - suitBot) * 0.18

	create-glyph 'clubSuit' 0x2663 : wrap : ClubShape circleRadius

	create-glyph 'whiteClubSuit' 0x2667 : wrap : glyph-proc
		local ro : circleRadius + sw / 2
		local ri : circleRadius - sw / 2
		include : difference [ClubShape ro] [ClubTriangles ri]

	create-glyph 'diamondSuit' 0x2666 : wrap : spiro-outline
		corner df.middle suitTop
		corner (suitRight - O) SymbolMid
		corner df.middle suitBot
		corner (suitLeft + O) SymbolMid

	create-glyph 'whiteDiamondSuit' 0x2662 : wrap : intersection [refer-glyph 'diamondSuit']
		union
			dispiro [widths.rhs sw] [flat df.middle suitTop] [curl (suitRight - O) SymbolMid]
			dispiro [widths.rhs sw] [flat (suitRight - O) SymbolMid] [curl df.middle suitBot]
			dispiro [widths.rhs sw] [flat df.middle suitBot] [curl (suitLeft + O) SymbolMid]
			dispiro [widths.rhs sw] [flat (suitLeft + O) SymbolMid] [curl df.middle suitTop]


glyph-block Symbol-Pictograph-Planets : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Symbol-Arrow : ArrowShape

	create-glyph 'venus' 0x2640 : glyph-proc
		local obot : PictTop - RightSB + SB
		include : OShape PictTop obot SB RightSB OperatorStroke
		include : VBar Middle PictBot obot OperatorStroke
		include : HBar SB RightSB [mix PictBot (obot + OperatorStroke) 0.5] OperatorStroke

	turned 'earth' 0x2641 'venus' Middle SymbolMid

	create-glyph 'mars' 0x2642 : glyph-proc
		local otop : PictBot + RightSB - SB
		include : OShape otop PictBot SB RightSB OperatorStroke
		include : ArrowShape Middle (otop - OperatorStroke / 3) Middle PictTop ((RightSB - SB) * 0.4)


glyph-block Symbol-Pictograph-Musical : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define fine : adviceBlackness 6
	define noteSize : Width * 0.4 + fine / 2
	define noteCompress 0.8
	define commonNoteBottom : PictBot + noteCompress / 2 * noteSize
	define [BandShape z1 z2 l r h] : begin
		local slope : (z2.y - z1.y) / (z2.x - z1.x)
		local yl : z1.y + (l - z1.x) * slope
		local yr : z1.y + (r - z1.x) * slope
		return : spiro-outline
			corner l yl
			corner r yr
			corner r (yr + h)
			corner l (yl + h)
	define [MusicalNoteAt size x y] : glyph-proc
		include : Ring (- noteCompress / 2 * size) (noteCompress / 2 * size) (-size) 0
		include : Upright
		include : new Transform 1 0 0.15 1 0 0
		include : Translate x y
		include : Italify

	create-glyph 'crotchet' 0x2669 : union
		MusicalNoteAt noteSize (Middle + noteSize / 6 + fine / 2 * HVContrast) commonNoteBottom
		VBar (Middle + noteSize / 6) commonNoteBottom PictTop fine

	create-glyph 'quaver' 0x266A : glyph-proc
		local x3 : mix Middle RightSB 0.35
		local y3 : mix PictBot PictTop 0.25
		local y2 : mix y3 PictTop 0.25
		include : union
			MusicalNoteAt noteSize Middle commonNoteBottom
			VBarRight Middle commonNoteBottom PictTop fine
			dispiro
				widths.rhs fine
				g4.down.start Middle PictTop
				g4.down.mid RightSB y2
				g4 x3 y3

	do "Beamed Notes"
		local x1 : Middle - noteSize / 6
		local x2 : x1 + noteSize * 7 / 6
		local deltaY : noteCompress * noteSize / 2
		local lb1 : PictBot + noteCompress / 2 * noteSize
		local bandWidth : noteSize * noteCompress * 0.75

		create-glyph 'beamQuaver' 0x266B : difference
			union
				MusicalNoteAt noteSize x1 commonNoteBottom
				VBarRight x1 commonNoteBottom (PictTop - deltaY) fine
				MusicalNoteAt noteSize x2 (commonNoteBottom + deltaY)
				VBarRight x2 (commonNoteBottom + deltaY) PictTop fine
				BandShape
					object [x x1] [y : PictTop - deltaY]
					object [x x2] [y PictTop]
					x1 - fine * HVContrast
					x2 + 0
					0 - bandWidth
			BandShape
				object [x x1] [y : PictTop - deltaY]
				object [x x2] [y PictTop]
				x1 - fine * HVContrast
				x2 + 0
				0 + bandWidth

		create-glyph 'beamSemiQuaver' 0x266C : union [refer-glyph 'beamQuaver']
			BandShape
				object [x x1] [y : PictTop - deltaY - 1.5 * bandWidth]
				object [x x2] [y : PictTop - 1.5 * bandWidth]
				x1 - fine * HVContrast
				x2 + 0
				0 - bandWidth

	do "sharp, flat and neutral"
		local nsTop PictTop
		local nsBot PictBot
		local fine : adviceBlackness 3.5
		local fine2 : adviceBlackness 4
		local l : SB - fine * 0
		local r : RightSB + fine * 0
		local hsp : ((r - l) - (fine * 2 * HVContrast)) * 0.3
		local skew 0.2

		create-glyph 'sharpTone' 0x266F : glyph-proc
			include : dispiro
				widths.center
				flat l ([mix nsTop nsBot 0.3] - (Middle - l) * skew) [heading Rightward]
				curl r ([mix nsTop nsBot 0.3] - (Middle - r) * skew) [heading Rightward]
			include : dispiro
				widths.center
				flat l ([mix nsTop nsBot 0.7] - (Middle - l) * skew) [heading Rightward]
				curl r ([mix nsTop nsBot 0.7] - (Middle - r) * skew) [heading Rightward]
			include : VBarLeft  (l + hsp) (nsBot - (Middle - l - hsp) * skew) (nsTop - (Middle - l - hsp) * skew) fine
			include : VBarRight (r - hsp) (nsBot - (Middle - r + hsp) * skew) (nsTop - (Middle - r + hsp) * skew) fine

		create-glyph 'flatTone' 0x266D : glyph-proc
			local yTerminal : mix nsBot nsTop 0.55
			local curly 0.65
			local curly2 1.1
			local curly3 0.3
			local l [mix SB RightSB 0.07]
			local r [mix RightSB SB 0.07]
			include : difference
				union
					VBarLeft l nsBot nsTop fine
					dispiro
						widths.lhs fine
						g4 l (nsBot - 1)
						alsoThru 0.5 curly3
						g4.up.mid (r - O + 1) ([mix nsBot yTerminal curly] + (r - l) * skew - TanSlope * SmoothAdjust) [widths.lhs (fine + 1)]
						g4.left.mid ([mix l r 0.5] - CorrectionOMidX * fine) ([mix nsBot yTerminal curly2] + (r - l) * skew / 2 + 1)
						g4 l (yTerminal + 1)
				difference
					spiro-outline
						corner l (nsBot - UPM)
						corner l nsBot
						alsoThru 0.5 curly3
						g4.up.mid (r - O) ([mix nsBot yTerminal curly] + (r - l) * skew - TanSlope * SmoothAdjust)
						g4.left.mid ([mix l r 0.5] - CorrectionOMidX * fine) ([mix nsBot yTerminal curly2] + (r - l) * skew / 2)
						corner l yTerminal
						corner l (yTerminal + 1)
						corner l nsTop
						corner Width nsTop
						corner Width (nsBot - UPM)
					spiro-outline
						corner 0 yTerminal
						corner 0 nsTop
						corner (l + fine * HVContrast) nsTop
						corner (l + fine * HVContrast) yTerminal
				spiro-outline
					corner l (nsBot - UPM)
					corner l nsTop
					corner (l - UPM) nsTop
					corner (l - UPM) (nsBot - UPM)

		create-glyph 'neutralTone' 0x266E : glyph-proc
			local k : 0.25 - (Stroke * 0.25 / (nsTop - nsBot))
			local kr 0.5
			local ll (l + hsp * kr)
			local rr (r - hsp * kr)

			local barLeft  : VBarLeft  ll [mix nsBot nsTop k] nsTop fine
			local barRight : VBarRight rr nsBot [mix nsBot nsTop (1 - k)] fine
			local diagLow : dispiro
				widths.lhs fine
				flat ll [mix nsBot nsTop k]
				curl rr ([mix nsBot nsTop k] + (rr - ll) * skew)
			local belowDiagLow : spiro-outline
				corner ll [mix nsBot nsTop k]
				corner rr ([mix nsBot nsTop k] + (rr - ll) * skew)
				corner rr nsBot
				corner ll nsBot
			local diagHigh : dispiro
				widths.lhs fine
				flat rr [mix nsBot nsTop (1 - k)]
				curl ll ([mix nsBot nsTop (1 - k)] - (rr - ll) * skew)
			local aboveDiagHigh : spiro-outline
				corner rr [mix nsBot nsTop (1 - k)]
				corner ll ([mix nsBot nsTop (1 - k)] - (rr - ll) * skew)
				corner ll nsTop
				corner rr nsTop
			local outsideBars : difference
				spiro-outline
					corner (ll - UPM) (nsBot - UPM)
					corner (ll - UPM) (nsTop + UPM)
					corner (rr + UPM) (nsTop + UPM)
					corner (rr + UPM) (nsBot - UPM)
				spiro-outline
					corner ll nsBot
					corner ll nsTop
					corner rr nsTop
					corner rr nsBot

			include : union
				difference barLeft belowDiagLow
				difference barRight aboveDiagHigh
				difference diagLow barLeft barRight outsideBars
				difference diagHigh barLeft barRight outsideBars

glyph-block Symbol-Pictograph-Metric-Marks : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	create-glyph 'metmark' 0xE00F : glyph-proc
		include : VBar Middle (-fontMetrics.OS_2.usWinDescent) (fontMetrics.OS_2.usWinAscent) ShoulderFine
		include : HBar Middle Width 0 ShoulderFine
		include : HBar Middle Width CAP ShoulderFine
		include : HBar Middle Width XH ShoulderFine
		include : HBar Middle Width Descender ShoulderFine
		include : HBar 0 Middle SymbolMid ShoulderFine
		include : HBar 0 Middle ParenTop ShoulderFine
		include : HBar 0 Middle ParenBot ShoulderFine

	define MosaicTop      fontMetrics.OS_2.sTypoAscender
	define MosaicBottom   fontMetrics.OS_2.sTypoDescender
	define MarkerSize     (UPM / 12)
	define MarkerBarWidth (UPM / 50)

	create-glyph 'boxMarkLeft' 0xE006 : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 ParenTop
			corner 0 (ParenTop + MarkerSize * 1.5)
			corner (-MarkerSize * 1.5) ParenTop
		include : spiro-outline
			corner 0 ParenBot
			corner 0 (ParenBot - MarkerSize * 1.5)
			corner (-MarkerSize * 1.5) ParenBot

	create-glyph 'boxMarkRight' 0xE007 : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 ParenTop
			corner 0 (ParenTop + MarkerSize * 1.5)
			corner (+MarkerSize * 1.5) ParenTop
		include : spiro-outline
			corner 0 ParenBot
			corner 0 (ParenBot - MarkerSize * 1.5)
			corner (+MarkerSize * 1.5) ParenBot

	create-glyph 'mosaicMarkLeft' 0xE008 : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 MosaicTop
			corner 0 (MosaicTop + MarkerSize * 1.5)
			corner (-MarkerSize * 1.5) MosaicTop
		include : spiro-outline
			corner 0 MosaicBottom
			corner 0 (MosaicBottom - MarkerSize * 1.5)
			corner (-MarkerSize * 1.5) MosaicBottom

	create-glyph 'mosaicMarkRight' 0xE009 : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 MosaicTop
			corner 0 (MosaicTop + MarkerSize * 1.5)
			corner (+MarkerSize * 1.5) MosaicTop
		include : spiro-outline
			corner 0 MosaicBottom
			corner 0 (MosaicBottom - MarkerSize * 1.5)
			corner (+MarkerSize * 1.5) MosaicBottom

	create-glyph 'baselineMarkUnder' 0xE00A : glyph-proc
		set-width 0
		include : HBar (-Width * 2) (Width * 2) 0 MarkerBarWidth

	create-glyph 'baselineMarkLeft' 0xE00B : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 0
			corner (-MarkerSize * 1.5) (+MarkerSize * 1.5)
			corner (-MarkerSize * 1.5) (-MarkerSize * 1.5)

	create-glyph 'baselineMarkRight' 0xE00C : glyph-proc
		set-width 0
		include : spiro-outline
			corner 0 0
			corner (+MarkerSize * 1.5) (+MarkerSize * 1.5)
			corner (+MarkerSize * 1.5) (-MarkerSize * 1.5)


glyph-block Symbol-Pictograph-Flags : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	local sw : adviceBlackness 5
	local flagDown : 0.07 * (ParenTop - ParenBot)
	local delta 1
	local curliness 0.85
	define [FlagBar] : VBar SB PictBot PictTop sw

	create-glyph 'blackflag' 0x2691 : glyph-proc
		include : spiro-outline
			corner SB PictTop
			curl (SB + delta) PictTop
			alsoThru 0.5 (1 - curliness)
			g4 Middle (PictTop - flagDown / 2)
			alsoThru 0.5 curliness
			flat (RightSB - delta) (PictTop - flagDown)
			corner RightSB (PictTop - flagDown)
			corner RightSB (SymbolMid - flagDown)
			curl (RightSB - delta) (SymbolMid - flagDown)
			alsoThru 0.5 (1 - curliness)
			g4 Middle (SymbolMid - flagDown / 2)
			alsoThru 0.5 curliness
			flat (SB + delta) SymbolMid
			corner SB SymbolMid
			close
		include : Translate (sw / 2 * HVContrast) 0
		include : FlagBar

	create-glyph 'whiteflag' 0x2690 : glyph-proc
		include : VBarRight RightSB (SymbolMid - flagDown) (PictTop - flagDown) sw
		include : dispiro
			widths.rhs sw
			flat SB PictTop [heading Rightward]
			curl (SB + delta) PictTop [heading Rightward]
			alsoThru 0.5 (1 - curliness)
			g4 Middle (PictTop - flagDown / 2)
			alsoThru 0.5 curliness
			flat (RightSB - delta) (PictTop - flagDown) [heading Rightward]
			curl RightSB (PictTop - flagDown) [heading Rightward]
		include : dispiro
			widths.rhs sw
			flat RightSB ((SymbolMid - sw / 2) - flagDown) [heading Leftward]
			curl (RightSB - delta) ((SymbolMid - sw / 2) - flagDown) [heading Leftward]
			alsoThru 0.5 (1 - curliness)
			g4 Middle ((SymbolMid - sw / 2) - flagDown / 2)
			alsoThru 0.5 curliness
			flat (SB + delta) (SymbolMid - sw / 2) [heading Leftward]
			curl SB (SymbolMid - sw / 2) [heading Leftward]
		include : Translate (sw / 2 * HVContrast) 0
		include : FlagBar


glyph-block Symbol-Pictograph-Typographic : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	create-glyph 'kome' 0x203B : glyph-proc
		local sw : adviceBlackness 3.75
		local radius : (RightSB - SB) / 2
		include : dispiro
			widths.center sw
			flat (Middle - radius) (SymbolMid - radius)
			curl (Middle + radius) (SymbolMid + radius)

		include : dispiro
			widths.center sw
			flat (Middle + radius) (SymbolMid - radius)
			curl (Middle - radius) (SymbolMid + radius)
		local r0 : Math.min ((RightSB - SB + (sw / [Math.sqrt 2]) - sw * 3) / 4) DotRadius
		local r  : radius - r0 + (sw / 2 / [Math.sqrt 2])
		include : RingAt (Middle + r) SymbolMid r0
		include : RingAt (Middle - r) SymbolMid r0
		include : RingAt Middle (SymbolMid + r) r0
		include : RingAt Middle (SymbolMid - r) r0

	create-glyph 'boltSymbol' 0x26A1 : glyph-proc
		local sw : [adviceBlackness 3] / 2
		local kInside 0.5
		local kOutside 2.5
		local l : mix SB RightSB 0.1
		local r : mix RightSB SB 0.1
		include : spiro-outline
			corner [mix l r 0.6] PictTop
			corner (l - sw * kInside) (SymbolMid - sw)
			corner (r - sw * kOutside) (SymbolMid - sw)
			corner [mix r l 0.6] PictBot
			corner (r + sw * kInside) (SymbolMid + sw)
			corner (l + sw * kOutside) (SymbolMid + sw)

	for-width-kinds WideWidth1
		define faceTop : mix SymbolMid PictTop 0.75
		define faceBot : mix SymbolMid PictBot 0.75
		define faceWidth : Math.min (MosaicWidth - SB * 2) (faceTop - faceBot)
		define faceMiddle : MosaicWidth / 2
		define faceLeft : faceMiddle - faceWidth / 2
		define faceRight : faceMiddle + faceWidth / 2
		define faceSma : SmoothAOf (SmallSmooth * MosaicWidthScalar) MosaicWidth
		define faceSmb : SmoothBOf (SmallSmooth * MosaicWidthScalar) MosaicWidth

		define faceStroke : adviceBlackness 5 ((faceWidth + SB * 2) / Width)
		define faceInnerStroke : adviceBlackness 8 ((faceWidth + SB * 2) / Width)
		define eyeRadius : DotRadius / Stroke * faceInnerStroke
		define eyeHeight    0.625
		define mouthDepth : 0.025 * [Math.sqrt MosaicWidthScalar]

		define [FaceRing F] : F faceTop faceBot faceLeft faceRight faceStroke faceSma faceSmb
		define [SmileFace width] : union
			DotAt (faceMiddle - width / 2 + eyeRadius / 2) [mix faceBot faceTop eyeHeight] eyeRadius
			DotAt (faceMiddle + width / 2 - eyeRadius / 2) [mix faceBot faceTop eyeHeight] eyeRadius
			dispiro
				widths.center faceInnerStroke
				g4 (faceMiddle - width / 2) [mix faceBot faceTop (1 - eyeHeight + mouthDepth)]
				g4 (faceMiddle)             [mix faceBot faceTop (1 - eyeHeight - mouthDepth)]
				g4 (faceMiddle + width / 2) [mix faceBot faceTop (1 - eyeHeight + mouthDepth)]

		create-glyph [MangleName 'whiteSmileFace'] [MangleUnicode 0x263a] : glyph-proc
			set-width MosaicWidth
			include : FaceRing OShape
			include : SmileFace : 0.6 * (faceWidth - faceStroke * 2)

		create-glyph [MangleName 'blackSmileFace'] [MangleUnicode 0x263B] : glyph-proc
			set-width MosaicWidth
			include : FaceRing OShapeOutline
			include : SmileFace : 0.6 * (faceWidth - faceStroke * 2)


glyph-block Symbol-Pictograph-IEC-Power-And-Playback : for-width-kinds WideWidth1 : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define leftFW : 0 + SB * MosaicWidthScalar
	define rightFW : MosaicWidth - SB * MosaicWidthScalar
	define squareRadiusFW : (rightFW - leftFW) / (2 * [Math.pow MosaicWidthScalar 0.3])
	define topFW : SymbolMid + squareRadiusFW
	define bottomFW : SymbolMid - squareRadiusFW

	define df : DivFrame MosaicWidthScalar
	define gap : Math.max (squareRadiusFW / 8 * MosaicWidthScalar) GeometryStroke

	create-glyph [MangleName 'powerOff'] [MangleUnicode 0x2B58] : glyph-proc
		set-width df.width
		include : RingStrokeAt df.middle SymbolMid squareRadiusFW GeometryStroke

	create-glyph [MangleName 'powerOn'] [MangleUnicode 0x23FD] : glyph-proc
		set-width df.width
		include : Rect
			SymbolMid + squareRadiusFW
			SymbolMid - squareRadiusFW
			df.middle - GeometryStroke / 2 * HVContrast
			df.middle + GeometryStroke / 2 * HVContrast

	create-glyph [MangleName 'powerOnOff'] [MangleUnicode 0x23FC] : glyph-proc
		set-width df.width
		include : refer-glyph [MangleName 'powerOff']
		include : Rect
			SymbolMid + squareRadiusFW - GeometryStroke - gap
			SymbolMid - squareRadiusFW + GeometryStroke + gap
			df.middle - GeometryStroke / 2 * HVContrast
			df.middle + GeometryStroke / 2 * HVContrast

	create-glyph [MangleName 'powerStandby'] [MangleUnicode 0x23FB] : glyph-proc
		set-width df.width
		include : union
			difference
				refer-glyph [MangleName 'powerOff']
				spiro-outline
					corner df.middle SymbolMid
					corner (df.middle - gap * 2 - GeometryStroke * HVContrast) (SymbolMid + squareRadiusFW * 2)
					corner (df.middle + gap * 2 + GeometryStroke * HVContrast) (SymbolMid + squareRadiusFW * 2)
			Rect
				SymbolMid + 1.5 * squareRadiusFW
				SymbolMid - 0.0 * squareRadiusFW
				df.middle - GeometryStroke / 2 * HVContrast
				df.middle + GeometryStroke / 2 * HVContrast

	create-glyph [MangleName 'powerSleep'] [MangleUnicode 0x23FE] : glyph-proc
		set-width df.width
		include : difference
			CircleRingAt df.middle SymbolMid squareRadiusFW
			CircleRingAt
				df.middle + squareRadiusFW * 0.5
				SymbolMid + squareRadiusFW * 0.35
				squareRadiusFW * 1.1
		include : Translate (squareRadiusFW * 0.15) 0

	create-glyph [MangleName 'playback/record'] [MangleUnicode 0x23FA] : glyph-proc
		set-width df.width
		include : RingAt df.middle SymbolMid squareRadiusFW GeometryStroke

	create-glyph [MangleName 'playback/stop'] [MangleUnicode 0x23F9] : glyph-proc
		set-width df.width
		include : Rect (SymbolMid + squareRadiusFW) (SymbolMid - squareRadiusFW) (df.middle - squareRadiusFW) (df.middle + squareRadiusFW)

	create-glyph [MangleName 'playback/pause'] [MangleUnicode 0x23F8] : glyph-proc
		set-width df.width
		include : Rect (SymbolMid + squareRadiusFW) (SymbolMid - squareRadiusFW) (df.middle - squareRadiusFW) (df.middle - squareRadiusFW / 3)
		include : Rect (SymbolMid + squareRadiusFW) (SymbolMid - squareRadiusFW) (df.middle + squareRadiusFW / 3) (df.middle + squareRadiusFW)

	local trigRad : squareRadiusFW + O * 2
	create-glyph [MangleName 'playback/down'] [MangleUnicode 0x23F7] : glyph-proc
		set-width df.width
		include : spiro-outline
			corner (df.middle - trigRad) (SymbolMid + trigRad / 2)
			corner (df.middle + trigRad) (SymbolMid + trigRad / 2)
			corner (df.middle)           (SymbolMid - trigRad / 2)

	create-glyph [MangleName 'playback/up'] [MangleUnicode 0x23F6] : glyph-proc
		set-width df.width
		include : spiro-outline
			corner (df.middle - trigRad) (SymbolMid - trigRad / 2)
			corner (df.middle + trigRad) (SymbolMid - trigRad / 2)
			corner (df.middle)           (SymbolMid + trigRad / 2)

	create-glyph [MangleName 'playback/right'] [MangleUnicode 0x23F5] : glyph-proc
		set-width df.width
		include : spiro-outline
			corner (df.middle - trigRad / 2) (SymbolMid - trigRad)
			corner (df.middle - trigRad / 2) (SymbolMid + trigRad)
			corner (df.middle + trigRad / 2) (SymbolMid)

	create-glyph [MangleName 'playback/left'] [MangleUnicode 0x23F4] : glyph-proc
		set-width df.width
		include : spiro-outline
			corner (df.middle + trigRad / 2) (SymbolMid - trigRad)
			corner (df.middle + trigRad / 2) (SymbolMid + trigRad)
			corner (df.middle - trigRad / 2) (SymbolMid)


glyph-block Symbol-Pictograph-Powerline-And-GUI : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	define uiFigTop : mix ParenBot ParenTop 0.95
	define uiFigBot : mix ParenBot ParenTop 0.05

	create-glyph 'branch' 0xE0A0 : glyph-proc
		local fine : adviceBlackness 3.5
		local y1 : mix uiFigBot uiFigTop 0.8
		local y2 : mix uiFigBot uiFigTop 0.2
		include : VBarLeft SB uiFigBot uiFigTop fine
		include : dispiro
			widths.rhs fine
			flat RightSB y1
			curl RightSB [mix y1 y2 0.4]
			g4 (SB + fine * HVContrast) y2 [heading Leftward]
		include : DotAt (RightSB - fine * HVContrast / 2) y1 [Math.max (fine * 1.5) PeriodRadius]

	create-glyph 'pwlLock' 0xE0A2 : glyph-proc
		local fine : adviceBlackness 3.5
		local lockTop : mix uiFigBot uiFigTop 0.6
		local lockLeft : SB / 2
		local lockRight : Width - SB / 2
		local lockHoleWidth : 1 / 5
		local lockHoleLeft : mix lockLeft lockRight (1 / 2 - lockHoleWidth / 2)
		local lockHoleRight : mix lockLeft lockRight (1 / 2 + lockHoleWidth / 2)
		local lockHoleTop : mix uiFigBot lockTop 0.75
		local lockHoleBottom : mix uiFigBot lockTop 0.25
		include : union
			intersection
				spiro-outline
					corner 0 (2 * uiFigTop)
					corner Width (2 * uiFigTop)
					corner Width (lockTop - 1)
					corner 0 (lockTop - 1)
					close
				OShape uiFigTop uiFigBot SB RightSB fine (SmallSmoothA) (SmallSmoothB)
			difference
				spiro-outline
					corner lockLeft lockTop
					corner lockRight lockTop
					corner lockRight uiFigBot
					corner lockLeft uiFigBot
					close
				OShapeOutline lockHoleTop lockHoleBottom lockHoleLeft lockHoleRight fine (SmallSmoothA * lockHoleWidth) (SmallSmoothB * lockHoleWidth)

	for-width-kinds WideWidth2
		do "arrowheadShapedPointer"
			define scaffold : object
			set scaffold.top : mix uiFigBot uiFigTop 0.85
			set scaffold.bot : mix uiFigBot uiFigTop 0.15
			set scaffold.width   : (Middle - SB) * 2 * [Math.pow (MosaicWidth / Width) 0.3]
			set scaffold.xMiddle : MosaicWidth / 2
			set scaffold.xLeft : scaffold.xMiddle - scaffold.width / 2
			set scaffold.xRight : scaffold.xMiddle + scaffold.width / 2
			create-glyph [MangleName 'arrowheadShapedPointer'] [MangleUnicode 0x1FBB0] : glyph-proc
				set-width MosaicWidth
				include : spiro-outline
					corner scaffold.xLeft scaffold.top
					corner scaffold.xRight [mix scaffold.bot scaffold.top (1 / 4)]
					corner [mix scaffold.xLeft scaffold.xRight (2 / 5)] [mix scaffold.bot scaffold.top (1 / 4)]
					corner scaffold.xLeft scaffold.bot

		do "Split graphics"
			define mLeft    SB
			define mRight : MosaicWidth - SB

			define [RoundSegW n hs he] : lambda [h1 v1 h2 v2 cl cr]  : glyph-proc
				local sw : adviceBlackness 4
				local left mLeft
				local right : mRight + MosaicWidth * (n - 1)
				include : dispiro
					widths.center sw
					corner [mix left right h1] [mix uiFigBot uiFigTop v1] hs
					corner [mix left right h2] [mix uiFigBot uiFigTop v2] he
					end : function [set this.contrast 1]
				if cl : include : CircleDotAt [mix left right h1] [mix uiFigBot uiFigTop v1] (sw / 2)
				if cr : include : CircleDotAt [mix left right h2] [mix uiFigBot uiFigTop v2] (sw / 2)

			define [ArcVHW n] : lambda [h1 v1 h2 v2 cl cr]  : glyph-proc
				local sw : adviceBlackness 4
				local left mLeft
				local right : mRight + MosaicWidth * (n - 1)
				include : dispiro
					widths.center sw
					corner [mix left right h1] [mix uiFigBot uiFigTop v1] [heading : if (v2 > v1) Upward Downward]
					arcvh
					corner [mix left right h2] [mix uiFigBot uiFigTop v2] [heading : if (h2 > h1) Rightward Leftward]
					end : function [set this.contrast 1]
				if cl : include : CircleDotAt [mix left right h1] [mix uiFigBot uiFigTop v1] (sw / 2)
				if cr : include : CircleDotAt [mix left right h2] [mix uiFigBot uiFigTop v2] (sw / 2)

			define [ArcHVW n] : lambda [h1 v1 h2 v2 cl cr]  : glyph-proc
				local sw : adviceBlackness 4
				local left mLeft
				local right : mRight + MosaicWidth * (n - 1)
				include : dispiro
					widths.center sw
					corner [mix left right h1] [mix uiFigBot uiFigTop v1] [heading : if (h2 > h1) Rightward Leftward]
					archv
					corner [mix left right h2] [mix uiFigBot uiFigTop v2] [heading : if (v2 > v1) Upward Downward]
					end : function [set this.contrast 1]
				if cl : include : CircleDotAt [mix left right h1] [mix uiFigBot uiFigTop v1] (sw / 2)
				if cr : include : CircleDotAt [mix left right h2] [mix uiFigBot uiFigTop v2] (sw / 2)

			define [BoxW n] : lambda [h1 v1 h2 v2] : glyph-proc
				local sw : adviceBlackness 4
				local left mLeft
				local right : mRight + MosaicWidth * (n - 1)
				include : spiro-outline
					corner [mix left right h1] [mix uiFigBot uiFigTop v1]
					corner [mix left right h2] [mix uiFigBot uiFigTop v1]
					corner [mix left right h2] [mix uiFigBot uiFigTop v2]
					corner [mix left right h1] [mix uiFigBot uiFigTop v2]

			define [CircW n] : lambda [h1 v1 r] : glyph-proc
				local sw : adviceBlackness 4
				local left mLeft
				local right : mRight + MosaicWidth * (n - 1)
				include : DotAt [mix left right h1] [mix uiFigBot uiFigTop v1] (r * (uiFigTop - uiFigBot))

			define [Nop] : begin
			define RoundSeg2  : RoundSegW 2 Nop Nop
			define Box2       : BoxW 2
			define Circ2      : CircW 2
			define RoundSeg3  : RoundSegW 3 Nop Nop
			define RoundSeg3H : RoundSegW 3 [heading Rightward] [heading Rightward]
			define RoundSeg3V : RoundSegW 3 [heading Downward] [heading Downward]
			define ArcVH3     : ArcVHW 3
			define ArcHV3     : ArcHVW 3
			define Box3       : BoxW 3
			define Circ3      : CircW 3

			define [MosaicWidthMask] : spiro-outline
				corner 0           [mix ParenBot ParenTop (-1)]
				corner MosaicWidth [mix ParenBot ParenTop (-1)]
				corner MosaicWidth [mix ParenBot ParenTop (+2)]
				corner 0           [mix ParenBot ParenTop (+2)]

			define [RunningManBody xOffset] : glyph-proc
				include : union
					RoundSeg2 (0 / 16) (3 / 8) (3 / 16) (5 / 8) 1 1
					RoundSeg2 (3 / 16) (5 / 8) (10 / 16) (5 / 8)
					RoundSeg2 (10 / 16) (5 / 8) (13 / 16) (7 / 8) 1 1
					RoundSeg2 (4 / 16) (3 / 8) (9 / 16) (3 / 8) 1 1
					RoundSeg2 (9 / 16) (3 / 8) (13 / 16) (0 / 8)
					RoundSeg2 (13 / 16) (0 / 8) (15 / 16) (0 / 8) 1 1
					RoundSeg2 (4 / 16) (6 / 16) (6 / 16) (3 / 16)
					RoundSeg2 (6 / 16) (3 / 16) (0 / 16) (3 / 16) 1 1
					RoundSeg2 (0 / 16) (3 / 16) (2 / 16) (0 / 8) 0 1
					Box2 (4 / 16) (6 / 16) (8 / 16) (5 / 8)
				include : Translate xOffset 0

			define [RunningManHead xOffset] : glyph-proc
				include : Circ2 (6 / 16) (14 / 16) (5 / 32)
				include : Translate xOffset 0

			create-glyph [MangleName 'runningManLeft'] [MangleUnicode 0x1FBB2] : glyph-proc
				set-width MosaicWidth
				include : RunningManHead 0
				include : intersection
					MosaicWidthMask
					RunningManBody 0

			create-glyph [MangleName 'runningManRight'] [MangleUnicode 0x1FBB3] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					RunningManBody (-MosaicWidth)

			define [FolderBody xOffset] : glyph-proc
				include : union
					RoundSeg2 (0 / 16) (1 / 8) (0 / 16) (11 / 16)
					RoundSeg2 (0 / 16) (11 / 16) (3 / 16) (7 / 8) 1 1
					RoundSeg2 (3 / 16) (7 / 8) (6 / 16) (7 / 8)
					RoundSeg2 (6 / 16) (7 / 8) (9 / 16) (11 / 16) 1 1
					RoundSeg2 (9 / 16) (11 / 16) (16 / 16) (11 / 16) 0 1
					RoundSeg2 (16 / 16) (11 / 16) (16 / 16) (1 / 8)
					RoundSeg2 (0 / 16) (1 / 8) (16 / 16) (1 / 8) 1 1
				include : Translate xOffset 0

			create-glyph [MangleName 'folderLeft'] [MangleUnicode 0x1FBB9] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					FolderBody 0

			create-glyph [MangleName 'folderRight'] [MangleUnicode 0x1FBBA] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					FolderBody (-MosaicWidth)

			define [PointingHandBody xOffset] : glyph-proc
				include : union
					RoundSeg3  (0 / 24) (0 / 8) (0 / 24) (8 / 8) 1 1
					RoundSeg3  (3 / 24) (7 / 8) (0 / 24) (8 / 8)
					RoundSeg3  (3 / 24) (1 / 8) (0 / 24) (0 / 8)
					RoundSeg3V (3 / 24) (7 / 8) (3 / 24) (1 / 8)
					ArcVH3     (3 / 24) (7 / 8) (6 / 24) (8 / 8)
					ArcVH3     (3 / 24) (1 / 8) (6 / 24) (0 / 8)
					RoundSeg3H (6 / 24) (8 / 8) (22 / 24) (8 / 8)
					ArcHV3     (22 / 24) (8 / 8) (24 / 24) (7 / 8)
					ArcVH3     (24 / 24) (7 / 8) (22 / 24) (6 / 8)
					RoundSeg3H (14 / 24) (6 / 8) (22 / 24) (6 / 8)
					ArcHV3     (11 / 24) (8 / 8) (14 / 24) (6 / 8)
					ArcVH3     (14 / 24) (6 / 8) (12 / 24) (5 / 8)
					RoundSeg3H (9 / 24) (5 / 8) (12 / 24) (5 / 8) 1 0
					ArcVH3     (9 / 24) (5 / 8) (3 / 24) (2 / 8)
					ArcHV3     (15 / 24) (6 / 8) (17 / 24) (5 / 8)
					ArcVH3     (17 / 24) (5 / 8) (15 / 24) (4 / 8)
					RoundSeg3H (11 / 24) (4 / 8) (15 / 24) (4 / 8) 1 0
					ArcHV3     (14 / 24) (4 / 8) (16 / 24) (3 / 8)
					ArcVH3     (16 / 24) (3 / 8) (14 / 24) (2 / 8)
					RoundSeg3H (8 / 24) (2 / 8) (14 / 24) (2 / 8) 1 0
					ArcHV3     (13 / 24) (2 / 8) (15 / 24) (1 / 8)
					ArcVH3     (15 / 24) (1 / 8) (13 / 24) (0 / 8)
					RoundSeg3H (6 / 24) (0 / 8) (13 / 24) (0 / 8)
				include : Translate xOffset 0

			create-glyph [MangleName 'pointingHand1'] [MangleUnicode 0x1FBC1] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					PointingHandBody 0

			create-glyph [MangleName 'pointingHand2'] [MangleUnicode 0x1FBC2] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					PointingHandBody (-MosaicWidth)

			create-glyph [MangleName 'pointingHand3'] [MangleUnicode 0x1FBC3] : glyph-proc
				set-width MosaicWidth
				include : intersection
					MosaicWidthMask
					PointingHandBody (-MosaicWidth * 2)

		do "Stick Man"
			define scaffold : object
			set scaffold.top       uiFigTop
			set scaffold.bot       uiFigBot
			set scaffold.xMiddle  : MosaicWidth / 2
			set scaffold.headSize : (uiFigTop - uiFigBot) / 2.5
			set scaffold.legSize  : (Middle - SB) * 2
			set scaffold.armSize  : (Middle - SB / 2) * 2
			set scaffold.stroke   : adviceBlackness 3.5
			set scaffold.armRaiseK  0.4
			set scaffold.yPelvis    : scaffold.bot + scaffold.legSize / 2
			set scaffold.xLeftFoot  : scaffold.xMiddle - scaffold.legSize / 2
			set scaffold.xRightFoot : scaffold.xMiddle + scaffold.legSize / 2
			set scaffold.yNeck      : scaffold.top - scaffold.headSize
			set scaffold.xLeftHead  : scaffold.xMiddle - scaffold.headSize / 2
			set scaffold.xRightHead : scaffold.xMiddle + scaffold.headSize / 2
			set scaffold.xLeftArm   : scaffold.xMiddle - scaffold.armSize / 2
			set scaffold.xRightArm  : scaffold.xMiddle + scaffold.armSize / 2
			set scaffold.yShoulder : lambda [p] : mix scaffold.yPelvis scaffold.yNeck p

			define [StickManHead] : OShape (scaffold.top - O) (scaffold.yNeck + O) (scaffold.xLeftHead + O) (scaffold.xRightHead - O) scaffold.stroke
			define [StickManArms p kl kr] : union
				dispiro
					widths.center scaffold.stroke
					corner scaffold.xMiddle [scaffold.yShoulder p]
					corner scaffold.xLeftArm ([scaffold.yShoulder p] + scaffold.armSize / 2 * kl)
				dispiro
					widths.center scaffold.stroke
					corner scaffold.xMiddle [scaffold.yShoulder p]
					corner scaffold.xRightArm ([scaffold.yShoulder p] + scaffold.armSize / 2 * kr)

			define [StickManBody kl kr] : glyph-proc
				include : StickManHead
				include : VBar scaffold.xMiddle scaffold.yPelvis scaffold.yNeck
				include : dispiro
					widths.center scaffold.stroke
					corner scaffold.xMiddle scaffold.yPelvis
					corner scaffold.xLeftFoot scaffold.bot
				include : dispiro
					widths.center scaffold.stroke
					corner scaffold.xMiddle scaffold.yPelvis
					corner scaffold.xRightFoot scaffold.bot
				include : StickManArms 0.6 kl kr

			define [StickManDressBody kl kr] : glyph-proc
				include : OShape (scaffold.top - O) (scaffold.yNeck + O) (scaffold.xLeftHead + O) (scaffold.xRightHead - O) scaffold.stroke
				define p 0.7
				define dressBottom : [mix scaffold.bot scaffold.yNeck 0.25] - scaffold.stroke / 2
				define dressLeft : scaffold.xLeftFoot - scaffold.stroke / 2
				define dressRight : scaffold.xRightFoot + scaffold.stroke / 2
				include : StickManArms p kl kr
				include : VBar scaffold.xMiddle [scaffold.yShoulder p] scaffold.yNeck
				include : intersection
					spiro-outline
						corner scaffold.xMiddle ([scaffold.yShoulder p] + scaffold.stroke)
						corner dressRight dressBottom
						corner dressLeft dressBottom
					union
						dispiro
							widths.rhs scaffold.stroke
							corner scaffold.xMiddle ([scaffold.yShoulder p] + scaffold.stroke)
							corner dressRight dressBottom
						dispiro
							widths.rhs scaffold.stroke
							corner dressRight dressBottom
							corner dressLeft dressBottom
						dispiro
							widths.rhs scaffold.stroke
							corner dressLeft dressBottom
							corner scaffold.xMiddle ([scaffold.yShoulder p] + scaffold.stroke)
				include : VBar [mix dressLeft dressRight 0.3] scaffold.bot (dressBottom - O) scaffold.stroke
				include : VBar [mix dressLeft dressRight 0.7] scaffold.bot (dressBottom - O) scaffold.stroke

			# Stick Man Figure
			create-glyph [MangleName 'stickMan'] [MangleUnicode 0x1FBC5] : glyph-proc
				set-width MosaicWidth
				include : StickManBody 0 0
			create-glyph [MangleName 'stickManArmsRaised'] [MangleUnicode 0x1FBC6] : glyph-proc
				set-width MosaicWidth
				include : StickManBody scaffold.armRaiseK scaffold.armRaiseK
			create-glyph [MangleName 'stickManLeaningLeft'] [MangleUnicode 0x1FBC7] : glyph-proc
				set-width MosaicWidth
				include : StickManBody (-scaffold.armRaiseK) scaffold.armRaiseK
			create-glyph [MangleName 'stickManLeaningRight'] [MangleUnicode 0x1FBC8] : glyph-proc
				set-width MosaicWidth
				include : StickManBody scaffold.armRaiseK (-scaffold.armRaiseK)
			create-glyph [MangleName 'stickManWithDress'] [MangleUnicode 0x1FBC9] : glyph-proc
				set-width MosaicWidth
				include : StickManDressBody 0 0

		do "upPointingChevron"
			define scaffold : object
			set scaffold.top : mix uiFigBot uiFigTop 0.85
			set scaffold.bot : mix uiFigBot uiFigTop 0.15
			set scaffold.slope 0.6
			set scaffold.width   : (Middle - SB) * 2 * [Math.pow (MosaicWidth / Width) 0.5]
			set scaffold.stroke  : adviceBlackness 3.5
			set scaffold.xMiddle : MosaicWidth / 2
			set scaffold.xLeft : scaffold.xMiddle - scaffold.width / 2
			set scaffold.xRight : scaffold.xMiddle + scaffold.width / 2
			set scaffold.xLeft2 : scaffold.xMiddle - scaffold.width
			set scaffold.xRight2 : scaffold.xMiddle + scaffold.width
			set scaffold.slopeRise : scaffold.slope * scaffold.width / 2

			define [ChevronUpperHalf flat] : intersection
				spiro-outline
					corner scaffold.xMiddle scaffold.top
					corner scaffold.xLeft   (scaffold.top - scaffold.slopeRise)
					corner scaffold.xLeft   (scaffold.bot + scaffold.stroke)
					if flat {} : list
						corner scaffold.xMiddle (scaffold.bot + scaffold.stroke + scaffold.slopeRise)
					corner scaffold.xRight  (scaffold.bot + scaffold.stroke)
					corner scaffold.xRight  (scaffold.top - scaffold.slopeRise)
				union
					VBarLeft scaffold.xLeft scaffold.bot scaffold.top scaffold.stroke
					VBarRight scaffold.xRight scaffold.bot scaffold.top scaffold.stroke
					dispiro
						widths.lhs scaffold.stroke
						corner scaffold.xMiddle scaffold.top
						corner scaffold.xLeft   (scaffold.top - scaffold.slopeRise)
					dispiro
						widths.rhs scaffold.stroke
						corner scaffold.xMiddle scaffold.top
						corner scaffold.xRight  (scaffold.top - scaffold.slopeRise)

			create-glyph [MangleName "upPointingChevron"] [MangleUnicode 0x1FBCA] : glyph-proc
				set-width MosaicWidth
				include : ChevronUpperHalf false
				include : intersection
					spiro-outline
						corner scaffold.xLeft   scaffold.top
						corner scaffold.xLeft   (scaffold.bot - scaffold.stroke)
						corner scaffold.xRight  (scaffold.bot - scaffold.stroke)
						corner scaffold.xRight  scaffold.top
					union
						dispiro
							widths.lhs scaffold.stroke
							corner scaffold.xMiddle (scaffold.bot + scaffold.slopeRise + scaffold.stroke)
							corner scaffold.xLeft2  (scaffold.bot - scaffold.slopeRise + scaffold.stroke)
						dispiro
							widths.rhs scaffold.stroke
							corner scaffold.xMiddle (scaffold.bot + scaffold.slopeRise + scaffold.stroke)
							corner scaffold.xRight2 (scaffold.bot - scaffold.slopeRise + scaffold.stroke)

			create-glyph [MangleName "upPointingHouse"] [MangleUnicode 0x2302] : glyph-proc
				set-width MosaicWidth
				include : ChevronUpperHalf true
				include : HBarBottom scaffold.xLeft scaffold.xRight scaffold.stroke

		do "Segmented digits"
			define scaffold : object
			set scaffold.gap : Width / 16
			set scaffold.stroke : [adviceBlackness 2] / 2
			set scaffold.top   : [mix uiFigBot uiFigTop 0.9] - scaffold.stroke
			set scaffold.mid   : mix uiFigBot uiFigTop 0.5
			set scaffold.bot   : [mix uiFigBot uiFigTop 0.1] + scaffold.stroke
			set scaffold.width : (Middle - SB) * 2 * [Math.pow (MosaicWidth / Width) 0.5]
			set scaffold.left  : (MosaicWidth / 2) - scaffold.width / 2 + scaffold.stroke / 2
			set scaffold.right : (MosaicWidth / 2) + scaffold.width / 2 - scaffold.stroke / 2
			define [StrokeV x yt yb] : spiro-outline
				corner x (yt - scaffold.gap)
				corner (x + scaffold.stroke) (yt - scaffold.gap - scaffold.stroke)
				corner (x + scaffold.stroke) (yb + scaffold.gap + scaffold.stroke)
				corner x (yb + scaffold.gap)
				corner (x - scaffold.stroke) (yb + scaffold.gap + scaffold.stroke)
				corner (x - scaffold.stroke) (yt - scaffold.gap - scaffold.stroke)
			define [StrokeH xl xr y s] : spiro-outline
				corner (xl + scaffold.gap) y
				corner (xl + scaffold.gap + scaffold.stroke) (y + scaffold.stroke)
				corner (xr - scaffold.gap - scaffold.stroke) (y + scaffold.stroke)
				corner (xr - scaffold.gap) y
				corner (xr - scaffold.gap - scaffold.stroke) (y - scaffold.stroke)
				corner (xl + scaffold.gap + scaffold.stroke) (y - scaffold.stroke)
			define [SegmentedDigit unicode a b c d e f g] : begin
				create-glyph [MangleName : NameUni unicode] [MangleUnicode unicode] : glyph-proc
					set-width MosaicWidth
					if a : include : StrokeH scaffold.left scaffold.right scaffold.top
					if b : include : StrokeV scaffold.left scaffold.top scaffold.mid
					if c : include : StrokeV scaffold.right scaffold.top scaffold.mid
					if d : include : StrokeH scaffold.left scaffold.right scaffold.mid
					if e : include : StrokeV scaffold.left scaffold.mid scaffold.bot
					if f : include : StrokeV scaffold.right scaffold.mid scaffold.bot
					if g : include : StrokeH scaffold.left scaffold.right scaffold.bot

			SegmentedDigit 0x1FBF0 1 1 1 0 1 1 1
			SegmentedDigit 0x1FBF1 0 0 1 0 0 1 0
			SegmentedDigit 0x1FBF2 1 0 1 1 1 0 1
			SegmentedDigit 0x1FBF3 1 0 1 1 0 1 1
			SegmentedDigit 0x1FBF4 0 1 1 1 0 1 0
			SegmentedDigit 0x1FBF5 1 1 0 1 0 1 1
			SegmentedDigit 0x1FBF6 1 1 0 1 1 1 1
			SegmentedDigit 0x1FBF7 1 1 1 0 0 1 0
			SegmentedDigit 0x1FBF8 1 1 1 1 1 1 1
			SegmentedDigit 0x1FBF9 1 1 1 1 0 1 1

		do "voidedGreekCross"
			create-glyph [MangleName "voidedGreekCross"] [MangleUnicode 0x1FBBB] : glyph-proc
				set-width MosaicWidth
				local sw : adviceBlackness 4
				local gap : [Math.max (Width / 8) (Width / 6 - sw / 2) ([adviceBlackness 3] - sw / 2)] / 2
				local mid : MosaicWidth / 2
				local size : [Math.min (MosaicWidth - SB * 2) (uiFigTop - uiFigBot)] / 2
				include : union
					VBarRight  (mid - gap) (SymbolMid + gap) (SymbolMid + size) sw
					VBarRight  (mid - gap) (SymbolMid - gap) (SymbolMid - size) sw
					VBarLeft   (mid + gap) (SymbolMid + gap) (SymbolMid + size) sw
					VBarLeft   (mid + gap) (SymbolMid - gap) (SymbolMid - size) sw
					HBarBottom (mid - size) (mid - gap) (SymbolMid + gap) sw
					HBarBottom (mid + size) (mid + gap) (SymbolMid + gap) sw
					HBarTop    (mid - size) (mid - gap) (SymbolMid - gap) sw
					HBarTop    (mid + size) (mid + gap) (SymbolMid - gap) sw


glyph-block Symbol-Pictograph-Checking-Marks : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	local light : adviceBlackness 4.5
	local medium : Math.max (light * 1.75) (Width * 0.2)
	local heavy : Math.max (light * 2.5) (Width * 0.3)
	local shapesize 0.8
	local shapesizeCheck : shapesize * 1.1
	foreach [{unicode sw} : items-of {{0x2713 light} {0x2714 medium}}] : begin
		create-glyph [NameUni unicode] unicode : glyph-proc
			include : dispiro
				widths.center sw
				g4 SB [mix SymbolMid [mix PictBot PictTop 0.46] shapesizeCheck]
				alsoThru 0.5 0.4
				g4 [mix SB RightSB 0.4] [mix SymbolMid [mix PictBot PictTop 0.05] shapesizeCheck] [heading Downward]
			include : dispiro
				widths.center sw
				g4 [mix SB RightSB 0.4] [mix SymbolMid [mix PictBot PictTop 0.05] shapesizeCheck] [heading Upward]
				alsoThru 0.5 0.6
				g4 RightSB [mix SymbolMid [mix PictBot PictTop 0.9] shapesizeCheck]

	foreach [{unicode sw} : items-of {{0x271A medium}} ] : begin
		create-glyph [NameUni unicode] unicode : glyph-proc
			include : dispiro
				widths.center sw
				g4 [mix Width RightSB 0.5] SymbolMid
				g4 [mix 0 SB 0.5] SymbolMid
			include : dispiro
				widths.center sw
				g4 Middle [mix SymbolMid PictTop (0.8 * shapesize * 7/8)]
				g4 Middle [mix SymbolMid PictBot (0.9 * shapesize * 7/8)]

	foreach [{unicode sw} : items-of {{0x2715 light} {0x2716 medium}} ] : begin
		create-glyph [NameUni unicode] unicode : glyph-proc
			include : dispiro
				widths.center sw
				g4 RightSB [mix SymbolMid PictTop (0.8 * shapesize)]
				g4 SB [mix SymbolMid PictBot (0.9 * shapesize)]
			include : dispiro
				widths.center sw
				g4 SB [mix SymbolMid PictTop (0.8 * shapesize)]
				g4 RightSB [mix SymbolMid PictBot (0.9 * shapesize)]

	foreach [{unicode sw} : items-of {{0x2717 light} {0x2718 medium}} ] : begin
		create-glyph [NameUni unicode] unicode : glyph-proc
			include : dispiro
				widths.center sw
				g4 RightSB [mix SymbolMid [mix PictBot PictTop 0.9] shapesize]
				alsoThru 0.53 0.45
				g4 SB [mix SymbolMid PictBot (1.05 * shapesize)]
			include : dispiro
				widths.center sw
				g4 [mix SB RightSB 0.1] [mix SymbolMid [mix PictBot PictTop 0.86] shapesize]
				alsoThru 0.47 0.5
				g4 [mix SB RightSB 0.9] [mix SymbolMid [mix PictBot PictTop 0.05] shapesize]

	foreach [{unicode sw op} : items-of {
		{ 0x276C light 1 }
		{ 0x276D light 0 }
		{ 0x276E medium 1 }
		{ 0x276F medium 0 }
		{ 0x2770 heavy 1 }
		{ 0x2771 heavy 0 }
	}] : begin
		create-glyph [NameUni unicode] unicode : glyph-proc
			include : dispiro
				widths.center sw
				corner [mix (SB + sw / 2) (RightSB - sw / 2) op] PictTop [heading Downward]
				corner [mix (SB + sw / 2) (RightSB - sw / 2) (1 - op)] SymbolMid [heading Downward]
				corner [mix (SB + sw / 2) (RightSB - sw / 2) op] PictBot [heading Downward]

glyph-block Symbol-Pictograph-I-Ching : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	# Trigrams
	define [yin m n] : glyph-proc
		local offsetY : (2 / 3) * (PictBot - PictTop) / n
		local startY : SymbolMid - offsetY * (n - 1) / 2
		local bar : adviceBlackness n
		local fine : adviceBlackness 5
		local gap : Math.max (Width / 8) (fine)
		include : HBar SB (Middle - gap / 2 * HVContrast) (startY + offsetY * m) bar
		include : HBar (Middle + gap / 2 * HVContrast) RightSB (startY + offsetY * m) bar

	define [yang m n] : glyph-proc
		local offsetY : (2 / 3) * (OperBot - PictTop) / n
		local startY : SymbolMid - offsetY * (n - 1) / 2
		local bar : adviceBlackness n
		include : HBar SB RightSB (startY + offsetY * m) bar

	define [patterns n su] : foreach [offset: range 0 [Math.pow 2 n]] : begin
		create-glyph ('iChingPatterrn/' + n + '/' + offset) (su + offset) : glyph-proc
			foreach [bit : range 0 n] : begin
				if [maskBit offset bit]
					then : include : yin bit n
					else : include : yang bit n

	patterns 1 0x268A
	patterns 2 0x268C
	patterns 3 0x2630
